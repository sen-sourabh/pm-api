{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/auth/login": {
      "post": {
        "operationId": "login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "returns the access_token for logged in user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/messenger/send-otp": {
      "post": {
        "operationId": "sendOTP",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationEmailRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email sent successfully"
          },
          "400": {
            "description": "All fields are required"
          },
          "404": {
            "description": "Email template not found"
          },
          "500": {
            "description": "No such file or directory"
          }
        },
        "tags": [
          "Messenger"
        ]
      }
    },
    "/api/v1/webhooks": {
      "post": {
        "operationId": "handleWebhook",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/api/v1/roles": {
      "get": {
        "operationId": "findAllRoles",
        "parameters": [
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "name of the role",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDefault",
            "required": false,
            "in": "query",
            "description": "The role is default or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isEnabled",
            "required": false,
            "in": "query",
            "description": "The role is enabled or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "The role is deleted or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/api/v1/roles/{id}": {
      "get": {
        "operationId": "findOneRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return role as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/api/v1/accounttypes": {
      "get": {
        "operationId": "findAllAccounttypes",
        "parameters": [
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "name of the accounttype",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDefault",
            "required": false,
            "in": "query",
            "description": "The accounttype is default or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isEnabled",
            "required": false,
            "in": "query",
            "description": "The accounttype is enabled or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "The accounttype is deleted or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of accounttypes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Accounttype"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Accounttypes"
        ]
      }
    },
    "/api/v1/accounttypes/{id}": {
      "get": {
        "operationId": "findOneUsertype",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return accounttype as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounttype"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Accounttypes"
        ]
      }
    },
    "/api/v1/users": {
      "post": {
        "operationId": "createUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "get": {
        "operationId": "findAllUsers",
        "parameters": [
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "Unique email of the user",
            "schema": {
              "uniqueItems": true,
              "type": "string"
            }
          },
          {
            "name": "phoneNumber",
            "required": false,
            "in": "query",
            "description": "phone number of the user",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "isEnabled",
            "required": false,
            "in": "query",
            "description": "whether user is enabled or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "whether user is deleted or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "role of the user",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "accounttype",
            "required": false,
            "in": "query",
            "description": "accounttype of the user",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "operationId": "findOneUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return user as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "return update user as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "removeUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return deleted user as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/activity-logs": {
      "get": {
        "operationId": "findAllActivityLogs",
        "parameters": [
          {
            "name": "handler",
            "required": false,
            "in": "query",
            "description": "module where on this request happen",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "method",
            "required": false,
            "in": "query",
            "description": "method of the request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseCode",
            "required": false,
            "in": "query",
            "description": "http status code of the final response",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ipAddress",
            "required": false,
            "in": "query",
            "description": "ipAddress of the request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updatedAt",
            "required": false,
            "in": "query",
            "description": "With record update it`ll be auto generated",
            "schema": {
              "format": "T",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of activity logs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityLog"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Activity Logs"
        ]
      }
    },
    "/api/v1/vaults": {
      "post": {
        "operationId": "createVault",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVaultDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Vaults"
        ]
      },
      "get": {
        "operationId": "findAllVaults",
        "parameters": [
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "The name of the vault",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "required": false,
            "in": "query",
            "description": "The owner of the vault",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isEnabled",
            "required": false,
            "in": "query",
            "description": "whether vault is enabled or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "whether vault is deleted or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of vaults",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vault"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Vaults"
        ]
      }
    },
    "/api/v1/vaults/{id}": {
      "get": {
        "operationId": "findOneVault",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return vault as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Vaults"
        ]
      },
      "patch": {
        "operationId": "updateVault",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVaultDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "return updated vault as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Vaults"
        ]
      },
      "delete": {
        "operationId": "removeVault",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return deleted vault as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Vaults"
        ]
      }
    },
    "/api/v1/files/upload": {
      "post": {
        "operationId": "uploadFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "create a file"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Files"
        ]
      }
    },
    "/api/v1/vaults-collaborators": {
      "post": {
        "operationId": "createVaultsCollaborator",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVaultsCollaboratorDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaultsCollaborator"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Vaults Collaborators"
        ]
      },
      "get": {
        "operationId": "findAllVaultsCollaborators",
        "parameters": [
          {
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "required": false,
            "name": "id",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "nullable": false,
              "default": "uuid",
              "type": "string"
            }
          },
          {
            "description": "first name of the user",
            "required": false,
            "name": "firstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "last name of the user",
            "required": false,
            "name": "lastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "organization name of the user",
            "required": false,
            "name": "organizationName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "position in organization of the user",
            "example": "Sr. Manager",
            "required": false,
            "name": "organizationPosition",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "no of empoyees in organization of the user",
            "required": false,
            "name": "noOfEmployees",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique email of the user",
            "required": false,
            "name": "email",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "string"
            }
          },
          {
            "description": "password of the user",
            "required": false,
            "name": "password",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "otp of the user",
            "required": false,
            "name": "otp",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "secret key of the user",
            "required": false,
            "name": "secretKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "phone number of the user",
            "required": false,
            "name": "phoneNumber",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "The date time of user's last login",
            "required": false,
            "name": "lastLogin",
            "in": "query",
            "schema": {
              "format": "T",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "whether user logged in or not",
            "required": false,
            "name": "isLogin",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "whether user is enabled or not",
            "required": false,
            "name": "isEnabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "whether user is deleted or not",
            "required": false,
            "name": "isDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "With record create it`ll be auto generated",
            "required": false,
            "name": "createdAt",
            "in": "query",
            "schema": {
              "format": "T",
              "nullable": false,
              "type": "string"
            }
          },
          {
            "description": "With record update it`ll be auto generated",
            "required": false,
            "name": "updatedAt",
            "in": "query",
            "schema": {
              "format": "T",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "role of the user",
            "required": false,
            "name": "role",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "accounttype of the user",
            "required": false,
            "name": "accounttype",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "required": false,
            "name": "id",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "nullable": false,
              "default": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The name of the vault",
            "required": false,
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The caption of the vault",
            "required": false,
            "name": "caption",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The small description about the vault",
            "required": false,
            "name": "description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The owner of the vault",
            "required": false,
            "name": "user",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The date time of vault's last access",
            "required": false,
            "name": "lastAccess",
            "in": "query",
            "schema": {
              "format": "T",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "whether vault is enabled or not",
            "required": false,
            "name": "isEnabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "whether vault is deleted or not",
            "required": false,
            "name": "isDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The datetime of record at creation",
            "required": false,
            "name": "createdAt",
            "in": "query",
            "schema": {
              "format": "T",
              "nullable": false,
              "type": "string"
            }
          },
          {
            "description": "The datetime of record at updation",
            "required": false,
            "name": "updatedAt",
            "in": "query",
            "schema": {
              "format": "T",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "access",
            "required": false,
            "in": "query",
            "description": "The access of the vault",
            "schema": {
              "enum": [
                "super_admin",
                "admin",
                "collaborator"
              ],
              "type": "string"
            }
          },
          {
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "required": false,
            "name": "id",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "nullable": false,
              "default": "uuid",
              "type": "string"
            }
          },
          {
            "description": "first name of the user",
            "required": false,
            "name": "firstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "last name of the user",
            "required": false,
            "name": "lastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "organization name of the user",
            "required": false,
            "name": "organizationName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "position in organization of the user",
            "example": "Sr. Manager",
            "required": false,
            "name": "organizationPosition",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "no of empoyees in organization of the user",
            "required": false,
            "name": "noOfEmployees",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique email of the user",
            "required": false,
            "name": "email",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "string"
            }
          },
          {
            "description": "password of the user",
            "required": false,
            "name": "password",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "otp of the user",
            "required": false,
            "name": "otp",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "secret key of the user",
            "required": false,
            "name": "secretKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "phone number of the user",
            "required": false,
            "name": "phoneNumber",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "The date time of user's last login",
            "required": false,
            "name": "lastLogin",
            "in": "query",
            "schema": {
              "format": "T",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "whether user logged in or not",
            "required": false,
            "name": "isLogin",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "whether user is enabled or not",
            "required": false,
            "name": "isEnabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "whether user is deleted or not",
            "required": false,
            "name": "isDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "With record create it`ll be auto generated",
            "required": false,
            "name": "createdAt",
            "in": "query",
            "schema": {
              "format": "T",
              "nullable": false,
              "type": "string"
            }
          },
          {
            "description": "With record update it`ll be auto generated",
            "required": false,
            "name": "updatedAt",
            "in": "query",
            "schema": {
              "format": "T",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "role of the user",
            "required": false,
            "name": "role",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "accounttype of the user",
            "required": false,
            "name": "accounttype",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "isEnabled",
            "required": false,
            "in": "query",
            "description": "whether collaborator is enabled or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of vaults collaborators",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VaultsCollaborator"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Vaults Collaborators"
        ]
      }
    },
    "/api/v1/vaults-collaborators/{id}": {
      "get": {
        "operationId": "findOneVaultsCollaborator",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return vaults collaborator as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaultsCollaborator"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Vaults Collaborators"
        ]
      },
      "patch": {
        "operationId": "updateVaultsCollaborator",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVaultsCollaboratorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "return updated vaults collaborator as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaultsCollaborator"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Vaults Collaborators"
        ]
      },
      "delete": {
        "operationId": "removeVaultsCollaborator",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return success after deleting vaults collaborator as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaultsCollaborator"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Vaults Collaborators"
        ]
      }
    },
    "/api/v1/attachments/users": {
      "post": {
        "operationId": "createUsersAttachment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateUsersAttachmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Attachments"
        ]
      }
    },
    "/api/v1/attachments/vaults": {
      "post": {
        "operationId": "createVaultsAttachment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateVaultsAttachmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Attachments"
        ]
      }
    },
    "/api/v1/attachments": {
      "get": {
        "operationId": "findAllAttachments",
        "parameters": [
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "The attachment category",
            "schema": {
              "enum": [
                "PROFILE",
                "ADDITIONAL"
              ],
              "type": "string"
            }
          },
          {
            "name": "user",
            "required": false,
            "in": "query",
            "description": "The user of the attachment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vault",
            "required": false,
            "in": "query",
            "description": "The vault of the attachment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isArchived",
            "required": false,
            "in": "query",
            "description": "The attachment is archived or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of attachments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Attachments"
        ]
      }
    },
    "/api/v1/attachments/{id}": {
      "get": {
        "operationId": "findOneAttachment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return attachment as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Attachments"
        ]
      }
    },
    "/api/v1/vault": {
      "get": {
        "operationId": "isServerRunning",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Vault"
        ]
      }
    }
  },
  "info": {
    "title": "Vault-api",
    "description": "Vault - Password manager",
    "version": "1.0",
    "contact": {
      "name": "Vault",
      "url": "Your website link",
      "email": "Your official gmail"
    }
  },
  "tags": [],
  "servers": [
    {
      "url": "http://localhost:4000"
    }
  ],
  "components": {
    "securitySchemes": {
      "basic": {
        "type": "http",
        "scheme": "basic"
      },
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "LoginRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "email of the user",
            "uniqueItems": true
          },
          "password": {
            "type": "string",
            "description": "password of the user"
          }
        },
        "required": [
          "email"
        ]
      },
      "LoginResponseModel": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "access token for user"
          }
        },
        "required": [
          "access_token"
        ]
      },
      "VerificationEmailRequestDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Name of the receiver",
            "example": "Alan",
            "maxLength": 100,
            "nullable": false
          },
          "email": {
            "description": "Receiver emails seperated by comma",
            "example": [
              "alan@gmail.com",
              "alex@gmail.com"
            ],
            "nullable": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subject": {
            "type": "string",
            "description": "Subject of sending email",
            "example": "Here is the subject",
            "nullable": false
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of email",
            "example": "Account Verification",
            "nullable": false,
            "enum": [
              "Sign Up",
              "Password Reset",
              "Account Verification",
              "Custom"
            ]
          },
          "attachments": {
            "type": "boolean",
            "description": "Set to true, If mail content attachments",
            "example": false,
            "nullable": false
          },
          "expiry_time": {
            "type": "number",
            "description": "Time of expiry of pascode/link (If any included in email)",
            "example": 10,
            "nullable": false
          },
          "expiry_unit": {
            "type": "string",
            "description": "Unit of expiry time of passcode/link ()If any included in email)",
            "example": "minutes",
            "nullable": false,
            "enum": [
              "seconds",
              "minutes",
              "hours",
              "days",
              "weeks",
              "months"
            ]
          }
        },
        "required": [
          "username",
          "email",
          "subject",
          "purpose",
          "attachments",
          "expiry_time",
          "expiry_unit"
        ]
      },
      "WebhookRequestDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "type of webhook request that is built-in",
            "example": "user:created"
          },
          "payload": {
            "type": "object",
            "description": "payload data for webhook"
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id is the unique number identifier",
            "example": 1,
            "nullable": false,
            "uniqueItems": true
          },
          "name": {
            "type": "string",
            "description": "name of the role"
          },
          "isDefault": {
            "type": "boolean",
            "description": "The role is default or not"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "The role is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "The role is deleted or not"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "With record create it`ll be auto generated",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "With record update it`ll be auto generated",
            "nullable": true
          }
        },
        "required": [
          "id"
        ]
      },
      "Accounttype": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id is the unique number identifier",
            "example": 1,
            "nullable": false,
            "uniqueItems": true
          },
          "name": {
            "type": "string",
            "description": "name of the accounttype"
          },
          "isDefault": {
            "type": "boolean",
            "description": "The accounttype is default or not"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "The accounttype is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "The accounttype is deleted or not"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "With record create it`ll be auto generated",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "With record update it`ll be auto generated",
            "nullable": true
          }
        },
        "required": [
          "id"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "first name of the user"
          },
          "lastName": {
            "type": "string",
            "description": "last name of the user"
          },
          "organizationName": {
            "type": "string",
            "description": "organization name of the user"
          },
          "organizationPosition": {
            "type": "string",
            "description": "position in organization of the user",
            "example": "Sr. Manager"
          },
          "noOfEmployees": {
            "type": "string",
            "description": "no of empoyees in organization of the user"
          },
          "password": {
            "type": "string",
            "description": "password of the user"
          },
          "role": {
            "type": "number",
            "description": "role of the user"
          },
          "accounttype": {
            "type": "number",
            "description": "accounttype of the user"
          },
          "email": {
            "type": "string",
            "description": "Unique email of the user",
            "uniqueItems": true
          },
          "phoneNumber": {
            "type": "number",
            "description": "phone number of the user"
          }
        },
        "required": [
          "email",
          "phoneNumber"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "default": "uuid",
            "nullable": false,
            "uniqueItems": true
          },
          "firstName": {
            "type": "string",
            "description": "first name of the user"
          },
          "lastName": {
            "type": "string",
            "description": "last name of the user"
          },
          "organizationName": {
            "type": "string",
            "description": "organization name of the user"
          },
          "organizationPosition": {
            "type": "string",
            "description": "position in organization of the user",
            "example": "Sr. Manager"
          },
          "noOfEmployees": {
            "type": "string",
            "description": "no of empoyees in organization of the user"
          },
          "email": {
            "type": "string",
            "description": "Unique email of the user",
            "uniqueItems": true
          },
          "password": {
            "type": "string",
            "description": "password of the user"
          },
          "otp": {
            "type": "number",
            "description": "otp of the user"
          },
          "secretKey": {
            "type": "string",
            "description": "secret key of the user"
          },
          "phoneNumber": {
            "type": "number",
            "description": "phone number of the user"
          },
          "lastLogin": {
            "format": "T",
            "type": "string",
            "description": "The date time of user's last login",
            "nullable": true
          },
          "isLogin": {
            "type": "boolean",
            "description": "whether user logged in or not"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether user is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "whether user is deleted or not"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "With record create it`ll be auto generated",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "With record update it`ll be auto generated",
            "nullable": true
          },
          "role": {
            "type": "number",
            "description": "role of the user"
          },
          "accounttype": {
            "type": "number",
            "description": "accounttype of the user"
          }
        }
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "first name of the user"
          },
          "lastName": {
            "type": "string",
            "description": "last name of the user"
          },
          "organizationName": {
            "type": "string",
            "description": "organization name of the user"
          },
          "organizationPosition": {
            "type": "string",
            "description": "position in organization of the user",
            "example": "Sr. Manager"
          },
          "noOfEmployees": {
            "type": "string",
            "description": "no of empoyees in organization of the user"
          },
          "password": {
            "type": "string",
            "description": "password of the user"
          },
          "otp": {
            "type": "number",
            "description": "otp of the user"
          },
          "phoneNumber": {
            "type": "number",
            "description": "phone number of the user"
          },
          "lastLogin": {
            "format": "T",
            "type": "string",
            "description": "The date time of user's last login",
            "nullable": true
          },
          "isLogin": {
            "type": "boolean",
            "description": "whether user logged in or not"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether user is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "whether user is deleted or not"
          },
          "role": {
            "type": "number",
            "description": "role of the user"
          }
        }
      },
      "ActivityLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "default": "uuid",
            "nullable": false,
            "uniqueItems": true
          },
          "handler": {
            "type": "string",
            "description": "module where on this request happen"
          },
          "method": {
            "type": "string",
            "description": "method of the request"
          },
          "responseCode": {
            "type": "number",
            "description": "http status code of the final response"
          },
          "headers": {
            "type": "object",
            "description": "header of the request"
          },
          "request": {
            "type": "object",
            "description": "actual request that includes query/body/path params"
          },
          "response": {
            "type": "object",
            "description": "response of the request"
          },
          "ipAddress": {
            "type": "string",
            "description": "ipAddress of the request"
          },
          "location": {
            "type": "string",
            "description": "location of the request"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "With record create it`ll be auto generated",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "With record update it`ll be auto generated",
            "nullable": true
          }
        }
      },
      "CreateVaultDto": {
        "type": "object",
        "properties": {
          "caption": {
            "type": "string",
            "description": "The caption of the vault"
          },
          "description": {
            "type": "string",
            "description": "The small description about the vault"
          },
          "name": {
            "type": "string",
            "description": "The name of the vault"
          },
          "user": {
            "type": "string",
            "description": "The owner of the vault"
          }
        },
        "required": [
          "name",
          "user"
        ]
      },
      "Vault": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "default": "uuid",
            "nullable": false,
            "uniqueItems": true
          },
          "name": {
            "type": "string",
            "description": "The name of the vault"
          },
          "caption": {
            "type": "string",
            "description": "The caption of the vault"
          },
          "description": {
            "type": "string",
            "description": "The small description about the vault"
          },
          "user": {
            "type": "string",
            "description": "The owner of the vault"
          },
          "lastAccess": {
            "format": "T",
            "type": "string",
            "description": "The date time of vault's last access",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether vault is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "whether vault is deleted or not"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at creation",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at updation",
            "nullable": true
          }
        }
      },
      "UpdateVaultDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the vault"
          },
          "caption": {
            "type": "string",
            "description": "The caption of the vault"
          },
          "description": {
            "type": "string",
            "description": "The small description about the vault"
          },
          "user": {
            "type": "string",
            "description": "The owner of the vault"
          },
          "lastAccess": {
            "format": "T",
            "type": "string",
            "description": "The date time of vault's last access",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether vault is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "whether vault is deleted or not"
          }
        }
      },
      "CreateVaultsCollaboratorDto": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "The collaborator of the vault",
            "nullable": false
          },
          "vault": {
            "type": "string",
            "description": "The shared vault",
            "nullable": false
          },
          "access": {
            "type": "string",
            "description": "The access of the vault",
            "nullable": false,
            "enum": [
              "super_admin",
              "admin",
              "collaborator"
            ]
          },
          "addedBy": {
            "type": "string",
            "description": "The user who given the access",
            "nullable": false
          }
        },
        "required": [
          "user",
          "vault",
          "access",
          "addedBy"
        ]
      },
      "VaultsCollaborator": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "default": "uuid",
            "nullable": false,
            "uniqueItems": true
          },
          "user": {
            "description": "The collaborator of the vault",
            "nullable": false,
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "vault": {
            "description": "The shared vault",
            "nullable": false,
            "allOf": [
              {
                "$ref": "#/components/schemas/Vault"
              }
            ]
          },
          "access": {
            "type": "string",
            "description": "The access of the vault",
            "enum": [
              "super_admin",
              "admin",
              "collaborator"
            ]
          },
          "addedBy": {
            "description": "The user who given the access",
            "nullable": false,
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether collaborator is enabled or not"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at creation",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at updation",
            "nullable": true
          }
        }
      },
      "UpdateVaultsCollaboratorDto": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "The collaborator of the vault",
            "nullable": false
          },
          "vault": {
            "type": "string",
            "description": "The shared vault",
            "nullable": false
          },
          "access": {
            "type": "string",
            "description": "The access of the vault",
            "nullable": false,
            "enum": [
              "super_admin",
              "admin",
              "collaborator"
            ]
          },
          "addedBy": {
            "type": "string",
            "description": "The user who given the access",
            "nullable": false
          }
        },
        "required": [
          "user",
          "vault",
          "access",
          "addedBy"
        ]
      },
      "CreateUsersAttachmentDto": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          },
          "category": {
            "type": "string",
            "description": "The attachment category",
            "enum": [
              "PROFILE",
              "ADDITIONAL"
            ]
          },
          "user": {
            "type": "string",
            "description": "The user of the attachment"
          }
        },
        "required": [
          "file",
          "category",
          "user"
        ]
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "default": "uuid",
            "nullable": false,
            "uniqueItems": true
          },
          "name": {
            "type": "string",
            "description": "The attachment name"
          },
          "fileFormat": {
            "type": "string",
            "description": "The attachment file format",
            "enum": [
              "png",
              "jpeg",
              "jpg"
            ]
          },
          "category": {
            "type": "string",
            "description": "The attachment category",
            "enum": [
              "PROFILE",
              "ADDITIONAL"
            ]
          },
          "key": {
            "type": "string",
            "description": "The attachment key"
          },
          "url": {
            "type": "string",
            "description": "The attachment url"
          },
          "user": {
            "type": "string",
            "description": "The user of the attachment"
          },
          "vault": {
            "type": "string",
            "description": "The vault of the attachment"
          },
          "isArchived": {
            "type": "boolean",
            "description": "The attachment is archived or not"
          },
          "lastAccessed": {
            "format": "T",
            "type": "string",
            "description": "The date time of attachment's last accessed",
            "nullable": true
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "With record create it`ll be auto generated",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "With record update it`ll be auto generated",
            "nullable": true
          }
        }
      },
      "CreateVaultsAttachmentDto": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          },
          "category": {
            "type": "string",
            "description": "The attachment category",
            "enum": [
              "PROFILE",
              "ADDITIONAL"
            ]
          },
          "vault": {
            "type": "string",
            "description": "The vault of the attachment"
          }
        },
        "required": [
          "file",
          "category",
          "vault"
        ]
      }
    }
  }
}