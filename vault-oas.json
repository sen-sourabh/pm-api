{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/auth/login": {
      "post": {
        "operationId": "login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "returns the access_token for logged in user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "operationId": "register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/messenger/send-otp": {
      "post": {
        "operationId": "sendOTP",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationEmailRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email sent successfully"
          },
          "400": {
            "description": "All fields are required"
          },
          "404": {
            "description": "Email template not found"
          },
          "500": {
            "description": "No such file or directory"
          }
        },
        "tags": [
          "Messenger"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/webhooks": {
      "post": {
        "operationId": "createWebhook",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "findAllWebhooks",
        "parameters": [
          {
            "name": "event",
            "required": false,
            "in": "query",
            "description": "The event of the webhook",
            "schema": {
              "enum": [
                "user:created",
                "user:updated",
                "user:deleted",
                "vault:created",
                "vault:updated",
                "vault:deleted",
                "collaborator:created",
                "collaborator:updated",
                "collaborator:deleted",
                "provider:created",
                "provider:updated",
                "provider:deleted",
                "fieldAssociation:created",
                "fieldAssociation:updated",
                "fieldAssociation:deleted",
                "customField:created",
                "customField:updated",
                "customField:deleted",
                "attachment:created",
                "attachment:updated",
                "attachment:deleted"
              ],
              "type": "string"
            }
          },
          {
            "name": "user",
            "required": false,
            "in": "query",
            "description": "The owner of the webhook",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastTriggered",
            "required": false,
            "in": "query",
            "description": "The date time of webhook when last triggered",
            "schema": {
              "format": "T",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "isEnabled",
            "required": false,
            "in": "query",
            "description": "whether webhook is enabled or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "updatedAt",
            "required": false,
            "in": "query",
            "description": "The datetime of record at updation",
            "schema": {
              "format": "T",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/webhooks/{id}": {
      "get": {
        "operationId": "findOneWebhook",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return webhook as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "updateWebhook",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "return updated webhook as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "removeWebhook",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return deleted webhook as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/roles": {
      "get": {
        "operationId": "findAllRoles",
        "parameters": [
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "name of the role",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDefault",
            "required": false,
            "in": "query",
            "description": "The role is default or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isEnabled",
            "required": false,
            "in": "query",
            "description": "The role is enabled or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "The role is deleted or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Roles"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/roles/{id}": {
      "get": {
        "operationId": "findOneRole",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return role as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Roles"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/account-types": {
      "get": {
        "operationId": "findAllAccountTypes",
        "parameters": [
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "name of the account type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDefault",
            "required": false,
            "in": "query",
            "description": "The account type is default or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isEnabled",
            "required": false,
            "in": "query",
            "description": "The account type is enabled or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "The account type is deleted or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of account types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountType"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AccountTypes"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/account-types/{id}": {
      "get": {
        "operationId": "findOneUsertype",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return account type as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountType"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "AccountTypes"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users": {
      "post": {
        "operationId": "createUser",
        "summary": "returns all the users",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "findAllUsers",
        "parameters": [
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "Unique email of the user",
            "schema": {
              "uniqueItems": true,
              "type": "string"
            }
          },
          {
            "name": "phoneNumber",
            "required": false,
            "in": "query",
            "description": "phone number of the user",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "isEnabled",
            "required": false,
            "in": "query",
            "description": "whether user is enabled or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "whether user is deleted or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "role of the user",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "accountType",
            "required": false,
            "in": "query",
            "description": "account type of the user",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "operationId": "findOneUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return user as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "return update user as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "removeUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return deleted user as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/activity-logs": {
      "get": {
        "operationId": "findAllActivityLogs",
        "parameters": [
          {
            "name": "handler",
            "required": false,
            "in": "query",
            "description": "module where on this request happen",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "method",
            "required": false,
            "in": "query",
            "description": "method of the request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "responseCode",
            "required": false,
            "in": "query",
            "description": "http status code of the final response",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ipAddress",
            "required": false,
            "in": "query",
            "description": "ipAddress of the request",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updatedAt",
            "required": false,
            "in": "query",
            "description": "With record update it`ll be auto generated",
            "schema": {
              "format": "T",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of activity logs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityLog"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Activity Logs"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/vaults": {
      "post": {
        "operationId": "createVault",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVaultDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Vaults"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "findAllVaults",
        "parameters": [
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "The name of the vault",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isPrivate",
            "required": false,
            "in": "query",
            "description": "whether vault is private or not, Default vault will be private",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user",
            "required": false,
            "in": "query",
            "description": "The owner of the vault",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isEnabled",
            "required": false,
            "in": "query",
            "description": "whether vault is enabled or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "whether vault is deleted or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of vaults",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vault"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Vaults"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/vaults/{id}": {
      "get": {
        "operationId": "findOneVault",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return vault as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Vaults"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "updateVault",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVaultDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "return updated vault as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Vaults"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "removeVault",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return deleted vault as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vault"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Vaults"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/vaults-collaborators": {
      "post": {
        "operationId": "createVaultsCollaborator",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVaultsCollaboratorDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaultsCollaborator"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Vaults Collaborators"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "findAllVaultsCollaborators",
        "parameters": [
          {
            "name": "user",
            "required": false,
            "in": "query",
            "description": "The collaborator of the vault",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          },
          {
            "name": "vault",
            "required": false,
            "in": "query",
            "description": "The shared vault",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "The access of the vault",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "updatedBy",
            "required": false,
            "in": "query",
            "description": "The user who given/updated the access",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          },
          {
            "name": "isEnabled",
            "required": false,
            "in": "query",
            "description": "whether collaborator is enabled or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of vaults collaborators",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VaultsCollaborator"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Vaults Collaborators"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/vaults-collaborators/{id}": {
      "get": {
        "operationId": "findOneVaultsCollaborator",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return vaults collaborator as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaultsCollaborator"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Vaults Collaborators"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "updateVaultsCollaborator",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVaultsCollaboratorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "return updated vaults collaborator as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaultsCollaborator"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Vaults Collaborators"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "removeVaultsCollaborator",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return success after deleting vaults collaborator as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VaultsCollaborator"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Vaults Collaborators"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/attachments": {
      "post": {
        "operationId": "upsertAttachment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateAttachmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Attachments"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "findAllAttachments",
        "parameters": [
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "The attachment category",
            "schema": {
              "enum": [
                "PROFILE",
                "ADDITIONAL"
              ],
              "type": "string"
            }
          },
          {
            "name": "user",
            "required": false,
            "in": "query",
            "description": "The user of the attachment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vault",
            "required": false,
            "in": "query",
            "description": "The vault of the attachment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isArchived",
            "required": false,
            "in": "query",
            "description": "The attachment is archived or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of attachments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Attachments"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/attachments/{id}": {
      "get": {
        "operationId": "findOneAttachment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return attachment as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Attachments"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/providers": {
      "post": {
        "operationId": "createProvider",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProviderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Providers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "findAllProviders",
        "parameters": [
          {
            "name": "vault",
            "required": false,
            "in": "query",
            "description": "The vault where provider belongs to.",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "The name of the provider",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addedBy",
            "required": false,
            "in": "query",
            "description": "The user who added the provider",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          },
          {
            "name": "isEnabled",
            "required": false,
            "in": "query",
            "description": "whether provider is enabled or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "whether provider is deleted or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Provider"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Providers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/providers/{id}": {
      "get": {
        "operationId": "findOneProvider",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return provider as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Providers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "updateProvider",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProviderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "return update provider as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Providers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "removeProvider",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return deleted provider as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Providers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/custom-fields": {
      "post": {
        "operationId": "createCustomField",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomFieldDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Custom Fields"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "findAllCustomFields",
        "parameters": [
          {
            "name": "key",
            "required": false,
            "in": "query",
            "description": "The key of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "The name of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "The type of the field",
            "schema": {
              "enum": [
                "text",
                "email",
                "password",
                "number",
                "date",
                "boolean",
                "file",
                "textarea"
              ],
              "type": "string"
            }
          },
          {
            "name": "addedBy",
            "required": false,
            "in": "query",
            "description": "The user who updated the field at last",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isEnabled",
            "required": false,
            "in": "query",
            "description": "whether custom field is enabled or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isDeleted",
            "required": false,
            "in": "query",
            "description": "whether custom field is deleted or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of custom fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomField"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Custom Fields"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/custom-fields/{id}": {
      "get": {
        "operationId": "findOneCustomField",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return custom field as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Custom Fields"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "updateCustomField",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomFieldDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "return updated custom field as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Custom Fields"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "removeCustomField",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return deleted custom field as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomField"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Custom Fields"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/provider-field-associations": {
      "post": {
        "operationId": "createProviderFieldAssociation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProviderFieldAssociationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderFieldAssociation"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Provider Field Associations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "findAllProviderFieldAssociations",
        "parameters": [
          {
            "name": "provider",
            "required": false,
            "in": "query",
            "description": "The field of the provider",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addedBy",
            "required": false,
            "in": "query",
            "description": "The user who added",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "No of records will be fetched in single request",
            "example": 25,
            "schema": {
              "default": 25,
              "type": "number"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns list of provider field associations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProviderFieldAssociation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "Provider Field Associations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/provider-field-associations/{id}": {
      "get": {
        "operationId": "findOneProviderFieldAssociation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relation",
            "required": false,
            "in": "query",
            "description": "To fetch the entities with their relation`s data",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return provider field association as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderFieldAssociation"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Provider Field Associations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "updateProviderFieldAssociation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProviderFieldAssociationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "return updated provider field association as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderFieldAssociation"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "Provider Field Associations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "removeProviderFieldAssociation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return deleted provider field association as per the identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderFieldAssociation"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Provider Field Associations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/subscription": {
      "post": {
        "operationId": "create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/subscription/{id}": {
      "get": {
        "operationId": "findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriptionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Subscriptions"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/server": {
      "get": {
        "operationId": "isServerRunning",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Server"
        ]
      }
    }
  },
  "info": {
    "title": "Vault-api",
    "description": "Vault - Password manager",
    "version": "1.0",
    "contact": {
      "name": "Vault",
      "url": "Your website link",
      "email": "Your official gmail"
    }
  },
  "tags": [],
  "servers": [
    {
      "url": "http://localhost:4000"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "LoginRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "email of the user",
            "uniqueItems": true
          },
          "password": {
            "type": "string",
            "description": "password of the user"
          }
        },
        "required": [
          "email"
        ]
      },
      "LoginResponseModel": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "access token for user"
          }
        },
        "required": [
          "access_token"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "first name of the user"
          },
          "lastName": {
            "type": "string",
            "description": "last name of the user"
          },
          "organizationName": {
            "type": "string",
            "description": "organization name of the user"
          },
          "organizationPosition": {
            "type": "string",
            "description": "position in organization of the user",
            "example": "Sr. Manager"
          },
          "noOfEmployees": {
            "type": "string",
            "description": "no of empoyees in organization of the user"
          },
          "password": {
            "type": "string",
            "description": "password of the user"
          },
          "phoneNumber": {
            "type": "number",
            "description": "phone number of the user"
          },
          "role": {
            "type": "number",
            "description": "role of the user"
          },
          "accountType": {
            "type": "number",
            "description": "account type of the user"
          },
          "email": {
            "type": "string",
            "description": "Unique email of the user",
            "uniqueItems": true
          }
        },
        "required": [
          "email"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "default": "uuid",
            "nullable": false,
            "uniqueItems": true
          },
          "firstName": {
            "type": "string",
            "description": "first name of the user"
          },
          "lastName": {
            "type": "string",
            "description": "last name of the user"
          },
          "organizationName": {
            "type": "string",
            "description": "organization name of the user"
          },
          "organizationPosition": {
            "type": "string",
            "description": "position in organization of the user",
            "example": "Sr. Manager"
          },
          "noOfEmployees": {
            "type": "string",
            "description": "no of empoyees in organization of the user"
          },
          "email": {
            "type": "string",
            "description": "Unique email of the user",
            "uniqueItems": true
          },
          "password": {
            "type": "string",
            "description": "password of the user"
          },
          "otp": {
            "type": "number",
            "description": "otp of the user"
          },
          "secretKey": {
            "type": "string",
            "description": "secret key of the user"
          },
          "phoneNumber": {
            "type": "number",
            "description": "phone number of the user"
          },
          "lastLogin": {
            "format": "T",
            "type": "string",
            "description": "The date time of user's last login",
            "nullable": true
          },
          "isLogin": {
            "type": "boolean",
            "description": "whether user logged in or not"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether user is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "whether user is deleted or not"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "With record create it`ll be auto generated",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "With record update it`ll be auto generated",
            "nullable": true
          },
          "role": {
            "type": "number",
            "description": "role of the user"
          },
          "accountType": {
            "type": "number",
            "description": "account type of the user"
          }
        }
      },
      "VerificationEmailRequestDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Name of the receiver",
            "example": "Alan",
            "maxLength": 100,
            "nullable": false
          },
          "email": {
            "description": "Receiver emails seperated by comma",
            "example": [
              "alan@gmail.com",
              "alex@gmail.com"
            ],
            "nullable": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subject": {
            "type": "string",
            "description": "Subject of sending email",
            "example": "Here is the subject",
            "nullable": false
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of email",
            "example": "account_verification",
            "nullable": false,
            "enum": [
              "sign_in",
              "password_reset",
              "account_verification",
              "custom"
            ]
          },
          "attachments": {
            "type": "boolean",
            "description": "Set to true, If mail content attachments",
            "example": false,
            "nullable": false
          },
          "expiry_time": {
            "type": "number",
            "description": "Time of expiry of pascode/link (If any included in email)",
            "example": 10,
            "nullable": false
          },
          "expiry_unit": {
            "type": "string",
            "description": "Unit of expiry time of passcode/link ()If any included in email)",
            "example": "minutes",
            "nullable": false,
            "enum": [
              "seconds",
              "minutes",
              "hours",
              "days",
              "weeks",
              "months"
            ]
          }
        },
        "required": [
          "username",
          "email",
          "subject",
          "purpose",
          "attachments",
          "expiry_time",
          "expiry_unit"
        ]
      },
      "CreateWebhookDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the webhook"
          },
          "event": {
            "type": "string",
            "description": "The event of the webhook",
            "enum": [
              "user:created",
              "user:updated",
              "user:deleted",
              "vault:created",
              "vault:updated",
              "vault:deleted",
              "collaborator:created",
              "collaborator:updated",
              "collaborator:deleted",
              "provider:created",
              "provider:updated",
              "provider:deleted",
              "fieldAssociation:created",
              "fieldAssociation:updated",
              "fieldAssociation:deleted",
              "customField:created",
              "customField:updated",
              "customField:deleted",
              "attachment:created",
              "attachment:updated",
              "attachment:deleted"
            ]
          },
          "targetUrl": {
            "type": "string",
            "description": "The target url of the webhook"
          },
          "secret": {
            "type": "string",
            "description": "The secret of the webhook"
          },
          "user": {
            "type": "string",
            "description": "The owner of the webhook"
          }
        }
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "default": "uuid",
            "nullable": false,
            "uniqueItems": true
          },
          "name": {
            "type": "string",
            "description": "The name of the webhook"
          },
          "event": {
            "type": "string",
            "description": "The event of the webhook",
            "enum": [
              "user:created",
              "user:updated",
              "user:deleted",
              "vault:created",
              "vault:updated",
              "vault:deleted",
              "collaborator:created",
              "collaborator:updated",
              "collaborator:deleted",
              "provider:created",
              "provider:updated",
              "provider:deleted",
              "fieldAssociation:created",
              "fieldAssociation:updated",
              "fieldAssociation:deleted",
              "customField:created",
              "customField:updated",
              "customField:deleted",
              "attachment:created",
              "attachment:updated",
              "attachment:deleted"
            ]
          },
          "targetUrl": {
            "type": "string",
            "description": "The target url of the webhook"
          },
          "secret": {
            "type": "string",
            "description": "The secret of the webhook"
          },
          "user": {
            "type": "string",
            "description": "The owner of the webhook"
          },
          "lastTriggered": {
            "format": "T",
            "type": "string",
            "description": "The date time of webhook when last triggered",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether webhook is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "whether webhook is deleted or not"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at creation",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at updation",
            "nullable": true
          }
        }
      },
      "UpdateWebhookDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the webhook"
          },
          "targetUrl": {
            "type": "string",
            "description": "The target url of the webhook"
          },
          "secret": {
            "type": "string",
            "description": "The secret of the webhook"
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id is the unique number identifier",
            "example": 1,
            "nullable": false,
            "uniqueItems": true
          },
          "name": {
            "type": "string",
            "description": "name of the role"
          },
          "isDefault": {
            "type": "boolean",
            "description": "The role is default or not"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "The role is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "The role is deleted or not"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "With record create it`ll be auto generated",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "With record update it`ll be auto generated",
            "nullable": true
          }
        },
        "required": [
          "id"
        ]
      },
      "AccountType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id is the unique number identifier",
            "example": 1,
            "nullable": false,
            "uniqueItems": true
          },
          "name": {
            "type": "string",
            "description": "name of the account type"
          },
          "isDefault": {
            "type": "boolean",
            "description": "The account type is default or not"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "The account type is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "The account type is deleted or not"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "With record create it`ll be auto generated",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "With record update it`ll be auto generated",
            "nullable": true
          }
        },
        "required": [
          "id"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "first name of the user"
          },
          "lastName": {
            "type": "string",
            "description": "last name of the user"
          },
          "organizationName": {
            "type": "string",
            "description": "organization name of the user"
          },
          "organizationPosition": {
            "type": "string",
            "description": "position in organization of the user",
            "example": "Sr. Manager"
          },
          "noOfEmployees": {
            "type": "string",
            "description": "no of empoyees in organization of the user"
          },
          "password": {
            "type": "string",
            "description": "password of the user"
          },
          "otp": {
            "type": "number",
            "description": "otp of the user"
          },
          "phoneNumber": {
            "type": "number",
            "description": "phone number of the user"
          },
          "lastLogin": {
            "format": "T",
            "type": "string",
            "description": "The date time of user's last login",
            "nullable": true
          },
          "isLogin": {
            "type": "boolean",
            "description": "whether user logged in or not"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether user is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "whether user is deleted or not"
          }
        }
      },
      "ActivityLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "default": "uuid",
            "nullable": false,
            "uniqueItems": true
          },
          "handler": {
            "type": "string",
            "description": "module where on this request happen"
          },
          "method": {
            "type": "string",
            "description": "method of the request"
          },
          "responseCode": {
            "type": "number",
            "description": "http status code of the final response"
          },
          "headers": {
            "type": "object",
            "description": "header of the request"
          },
          "request": {
            "type": "object",
            "description": "actual request that includes query/body/path params"
          },
          "response": {
            "type": "object",
            "description": "response of the request"
          },
          "ipAddress": {
            "type": "string",
            "description": "ipAddress of the request"
          },
          "location": {
            "type": "string",
            "description": "location of the request"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "With record create it`ll be auto generated",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "With record update it`ll be auto generated",
            "nullable": true
          }
        }
      },
      "CreateVaultDto": {
        "type": "object",
        "properties": {
          "caption": {
            "type": "string",
            "description": "The caption of the vault"
          },
          "description": {
            "type": "string",
            "description": "The small description about the vault"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "whether vault is private or not, Default vault will be private"
          },
          "user": {
            "type": "string",
            "description": "The owner of the vault"
          },
          "name": {
            "type": "string",
            "description": "The name of the vault"
          }
        },
        "required": [
          "name"
        ]
      },
      "Vault": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "default": "uuid",
            "nullable": false,
            "uniqueItems": true
          },
          "name": {
            "type": "string",
            "description": "The name of the vault"
          },
          "caption": {
            "type": "string",
            "description": "The caption of the vault"
          },
          "description": {
            "type": "string",
            "description": "The small description about the vault"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "whether vault is private or not, Default vault will be private"
          },
          "user": {
            "type": "string",
            "description": "The owner of the vault"
          },
          "lastAccessed": {
            "format": "T",
            "type": "string",
            "description": "The date time of vault's last access",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether vault is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "whether vault is deleted or not"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at creation",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at updation",
            "nullable": true
          }
        }
      },
      "UpdateVaultDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the vault"
          },
          "caption": {
            "type": "string",
            "description": "The caption of the vault"
          },
          "description": {
            "type": "string",
            "description": "The small description about the vault"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "whether vault is private or not, Default vault will be private"
          },
          "user": {
            "type": "string",
            "description": "The owner of the vault"
          },
          "lastAccessed": {
            "format": "T",
            "type": "string",
            "description": "The date time of vault's last access",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether vault is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "whether vault is deleted or not"
          }
        }
      },
      "CreateVaultsCollaboratorDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "number",
            "description": "The access of the vault"
          },
          "updatedBy": {
            "type": "string",
            "description": "The user who given/updated the access",
            "nullable": false
          },
          "user": {
            "type": "string",
            "description": "The collaborator`s email id of the vault",
            "nullable": false
          },
          "vault": {
            "type": "string",
            "description": "The shared vault",
            "nullable": false
          }
        },
        "required": [
          "user",
          "vault"
        ]
      },
      "VaultsCollaborator": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "default": "uuid",
            "nullable": false,
            "uniqueItems": true
          },
          "user": {
            "type": "string",
            "description": "The collaborator of the vault",
            "nullable": false
          },
          "vault": {
            "type": "string",
            "description": "The shared vault",
            "nullable": false
          },
          "role": {
            "type": "number",
            "description": "The access of the vault"
          },
          "updatedBy": {
            "type": "string",
            "description": "The user who given/updated the access",
            "nullable": false
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether collaborator is enabled or not"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at creation",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at updation",
            "nullable": true
          }
        }
      },
      "UpdateVaultsCollaboratorDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "number",
            "description": "The access of the vault"
          },
          "updatedBy": {
            "type": "string",
            "description": "The user who given/updated the access",
            "nullable": false
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether collaborator is enabled or not"
          },
          "user": {
            "type": "string",
            "description": "The collaborator of the vault",
            "nullable": false
          },
          "vault": {
            "type": "string",
            "description": "The shared vault",
            "nullable": false
          }
        },
        "required": [
          "user",
          "vault"
        ]
      },
      "CreateAttachmentDto": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          },
          "category": {
            "type": "string",
            "description": "The attachment category",
            "enum": [
              "PROFILE",
              "ADDITIONAL"
            ]
          },
          "name": {
            "type": "string",
            "description": "The attachment name"
          },
          "fileFormat": {
            "type": "string",
            "description": "The attachment file format",
            "enum": [
              "png",
              "jpeg",
              "jpg"
            ]
          },
          "key": {
            "type": "string",
            "description": "The attachment key"
          },
          "url": {
            "type": "string",
            "description": "The attachment url"
          },
          "vault": {
            "type": "string",
            "description": "The vault of the attachment"
          },
          "user": {
            "type": "string",
            "description": "The user of the attachment"
          }
        },
        "required": [
          "file",
          "category"
        ]
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "default": "uuid",
            "nullable": false,
            "uniqueItems": true
          },
          "name": {
            "type": "string",
            "description": "The attachment name"
          },
          "fileFormat": {
            "type": "string",
            "description": "The attachment file format",
            "enum": [
              "png",
              "jpeg",
              "jpg"
            ]
          },
          "category": {
            "type": "string",
            "description": "The attachment category",
            "enum": [
              "PROFILE",
              "ADDITIONAL"
            ]
          },
          "key": {
            "type": "string",
            "description": "The attachment key"
          },
          "url": {
            "type": "string",
            "description": "The attachment url"
          },
          "user": {
            "type": "string",
            "description": "The user of the attachment"
          },
          "vault": {
            "type": "string",
            "description": "The vault of the attachment"
          },
          "isArchived": {
            "type": "boolean",
            "description": "The attachment is archived or not"
          },
          "lastAccessed": {
            "format": "T",
            "type": "string",
            "description": "The date time of attachment's last accessed",
            "nullable": true
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "With record create it`ll be auto generated",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "With record update it`ll be auto generated",
            "nullable": true
          }
        }
      },
      "CreateProviderDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the provider"
          },
          "addedBy": {
            "type": "string",
            "description": "The user who added the provider",
            "nullable": false
          },
          "vault": {
            "type": "string",
            "description": "The vault where provider belongs to.",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "The name of the provider"
          }
        },
        "required": [
          "vault",
          "name"
        ]
      },
      "Provider": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "default": "uuid",
            "nullable": false,
            "uniqueItems": true
          },
          "vault": {
            "type": "string",
            "description": "The vault where provider belongs to.",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "The name of the provider"
          },
          "description": {
            "type": "string",
            "description": "The description of the provider"
          },
          "lastAccess": {
            "format": "T",
            "type": "string",
            "description": "The date time of provider's last access",
            "nullable": true
          },
          "addedBy": {
            "type": "string",
            "description": "The user who added the provider",
            "nullable": false
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether provider is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "whether provider is deleted or not"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at creation",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at updation",
            "nullable": true
          }
        }
      },
      "UpdateProviderDto": {
        "type": "object",
        "properties": {
          "vault": {
            "type": "string",
            "description": "The vault where provider belongs to.",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "The name of the provider"
          },
          "description": {
            "type": "string",
            "description": "The description of the provider"
          },
          "lastAccess": {
            "format": "T",
            "type": "string",
            "description": "The date time of provider's last access",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether provider is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "whether provider is deleted or not"
          }
        }
      },
      "CreateCustomFieldDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the field",
            "enum": [
              "text",
              "email",
              "password",
              "number",
              "date",
              "boolean",
              "file",
              "textarea"
            ]
          },
          "placeholder": {
            "type": "string",
            "description": "The placeholder of the field"
          },
          "helptext": {
            "type": "string",
            "description": "The helptext of the field"
          },
          "example": {
            "type": "string",
            "description": "The example value of the field"
          },
          "description": {
            "type": "string",
            "description": "The description of the field"
          },
          "addedBy": {
            "type": "string",
            "description": "The user who updated the field at last"
          },
          "name": {
            "type": "string",
            "description": "The name of the field"
          }
        },
        "required": [
          "name"
        ]
      },
      "CustomField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "default": "uuid",
            "nullable": false,
            "uniqueItems": true
          },
          "key": {
            "type": "string",
            "description": "The key of the field"
          },
          "name": {
            "type": "string",
            "description": "The name of the field"
          },
          "type": {
            "type": "string",
            "description": "The type of the field",
            "enum": [
              "text",
              "email",
              "password",
              "number",
              "date",
              "boolean",
              "file",
              "textarea"
            ]
          },
          "placeholder": {
            "type": "string",
            "description": "The placeholder of the field"
          },
          "helptext": {
            "type": "string",
            "description": "The helptext of the field"
          },
          "example": {
            "type": "string",
            "description": "The example value of the field"
          },
          "description": {
            "type": "string",
            "description": "The description of the field"
          },
          "addedBy": {
            "type": "string",
            "description": "The user who updated the field at last"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether custom field is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "whether custom field is deleted or not"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at creation",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at updation",
            "nullable": true
          }
        }
      },
      "UpdateCustomFieldDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the field"
          },
          "type": {
            "type": "string",
            "description": "The type of the field",
            "enum": [
              "text",
              "email",
              "password",
              "number",
              "date",
              "boolean",
              "file",
              "textarea"
            ]
          },
          "placeholder": {
            "type": "string",
            "description": "The placeholder of the field"
          },
          "helptext": {
            "type": "string",
            "description": "The helptext of the field"
          },
          "example": {
            "type": "string",
            "description": "The example value of the field"
          },
          "description": {
            "type": "string",
            "description": "The description of the field"
          },
          "addedBy": {
            "type": "string",
            "description": "The user who updated the field at last"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "whether custom field is enabled or not"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "whether custom field is deleted or not"
          }
        }
      },
      "CreateProviderFieldAssociationDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The field of the provider"
          },
          "customField": {
            "type": "string",
            "description": "The custom field id"
          },
          "value": {
            "type": "string",
            "description": "The value of the field"
          },
          "addedBy": {
            "type": "string",
            "description": "The user who added"
          }
        }
      },
      "ProviderFieldAssociation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id is the unique uuid identifier",
            "example": "e762634c-3e41-11eb-b897-0862660ccbd4",
            "default": "uuid",
            "nullable": false,
            "uniqueItems": true
          },
          "provider": {
            "type": "string",
            "description": "The field of the provider"
          },
          "customField": {
            "type": "string",
            "description": "The custom field id"
          },
          "value": {
            "type": "string",
            "description": "The value of the field"
          },
          "addedBy": {
            "type": "string",
            "description": "The user who added"
          },
          "createdAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at creation",
            "nullable": false
          },
          "updatedAt": {
            "format": "T",
            "type": "string",
            "description": "The datetime of record at updation",
            "nullable": true
          }
        }
      },
      "UpdateProviderFieldAssociationDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The field of the provider"
          },
          "customField": {
            "type": "string",
            "description": "The custom field id"
          },
          "value": {
            "type": "string",
            "description": "The value of the field"
          },
          "addedBy": {
            "type": "string",
            "description": "The user who added"
          }
        }
      },
      "CreateSubscriptionDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateSubscriptionDto": {
        "type": "object",
        "properties": {}
      }
    }
  }
}